{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf1f Welcome to the Elansol Developers Guide \ud83c\udf1f","text":"<p>Your ultimate resource for thriving as a developer at Elansol Software Development Company. This guide is a private resource created exclusively for Elansol developers. Whether you're just starting your journey or you're a seasoned pro, this guide is here to equip you with the tools, best practices, and knowledge to excel in both frontend and backend development.</p>"},{"location":"#navigation","title":"\ud83d\uddc2\ufe0f Navigation","text":"<p>Navigate through our comprehensive guide with ease:</p> <ul> <li>\ud83c\udfe0 Home: Start here to learn about Elansol and explore our internal development resources.</li> <li>\ud83d\udcda Naming Conventions: Master naming conventions for clean and maintainable code tailored to Elansol's coding standards.</li> <li>\ud83c\udfa8 Frontend Guide: Dive into tips, frameworks, and best practices for stunning UI development specifically for Elansol projects.</li> <li>\u2699\ufe0f Backend Guide: Unlock expert insights into backend logic, APIs, and database design used in Elansol's systems.</li> </ul>"},{"location":"#why-choose-the-elansol-developers-guide","title":"\ud83d\ude80 Why Choose the Elansol Developers Guide?","text":""},{"location":"#cutting-edge-tools","title":"\ud83d\udd27 Cutting-Edge Tools","text":"<p>Stay ahead with the latest tools and standards exclusive to Elansol projects.</p>"},{"location":"#comprehensive-resources","title":"\ud83d\udcd6 Comprehensive Resources","text":"<p>Access step-by-step guides designed for the unique challenges and requirements of Elansol's systems.</p>"},{"location":"#practical-expertise","title":"\ud83d\udca1 Practical Expertise","text":"<p>Leverage real-world insights from Elansol's development team to improve your workflow and project outcomes.</p>"},{"location":"#features-at-a-glance","title":"\u2728 Features at a Glance","text":"\ud83c\udf1f Feature \ud83d\udcdd Description Clean Code Practices Learn how to write clean, readable, and maintainable code following Elansol's guidelines. Frontend Mastery Stay updated with trends and frameworks tailored for Elansol's UI/UX standards. Backend Expertise Explore backend practices aligned with Elansol's architecture and API design. Collaboration Focus Collaborate with your team to build innovative solutions for Elansol's projects."},{"location":"#stay-connected","title":"\ud83c\udf10 Stay Connected","text":"<p>At Elansol, we're committed to innovation and growth. Stay engaged with:</p> <ul> <li>\ud83d\udcd8 Internal Updates: Regularly refreshed guides and resources for ongoing projects.</li> <li>\ud83c\udfa5 Tutorials: Step-by-step instructions for mastering Elansol's preferred tools and frameworks.</li> <li>\ud83d\udc65 Team Collaboration: Opportunities to connect with fellow Elansol developers and enhance teamwork.</li> </ul>"},{"location":"#contribute-and-collaborate","title":"\ud83c\udf31 Contribute and Collaborate","text":"<p>This guide thrives on collaboration within Elansol. Here's how you can contribute and stay aligned with the team:</p> <ul> <li>Pull and Push Code Every Day: Keep your work in sync with the team to ensure smooth collaboration.</li> <li>Submit a Pull Request to suggest improvements or add new insights to the guide.</li> <li>Work together with your team to create resources that enhance the efficiency and quality of Elansol's development process.</li> </ul>"},{"location":"#lets-build-something-amazing-together","title":"Let\u2019s Build Something Amazing Together! \ud83d\ude80","text":"<p>As part of Elansol's private development team, you're at the heart of our mission to create innovative, high-quality software.</p> <p>\ud83d\udcbb Ready to dive in? Access the guide, sharpen your skills, and contribute to Elansol's success.</p>"},{"location":"backendGuide/","title":"\ud83d\ude80 Backend Guide for Elansol Projects","text":"<p>This guide provides a comprehensive overview of how to set up and work with the Elansol Backend project. Follow these steps to ensure efficient development and adherence to best practices.</p>"},{"location":"backendGuide/#getting-started-with-the-elansol-backend","title":"\ud83c\udfaf Getting Started with the Elansol Backend","text":""},{"location":"backendGuide/#1-cloning-the-github-repository","title":"1. Cloning the GitHub Repository","text":"<p>Clone the project repository using SSH:</p> <pre><code>git clone git@github.com:elansol/elansol-backend.git\n</code></pre> <p>Ensure your SSH key is set up for GitHub. For detailed instructions on creating an SSH key, refer to this guide.</p>"},{"location":"backendGuide/#2-setting-up-the-project","title":"2. Setting Up the Project","text":"<p>Run the following commands in your terminal:</p> <ol> <li>Navigate to the project directory:    <code>bash    cd elansol-backend</code></li> <li>Install dependencies:    <code>bash    npm install</code></li> <li>Start the development server with Nodemon for automatic restarts:    <code>bash    npm run dev</code></li> </ol>"},{"location":"backendGuide/#folder-structure-of-the-project","title":"\ud83d\udcc1 Folder Structure of the Project","text":"<p>The project is organized as follows:</p> <pre><code>/elansol-backend\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /config          # Configuration files\n\u2502   \u2502   \u2514\u2500\u2500 database.config.ts\n\u2502   \u251c\u2500\u2500 /controllers     # Express route controllers\n\u2502   \u2502   \u2514\u2500\u2500 user.controller.ts\n\u2502   \u251c\u2500\u2500 /entities        # TypeORM entities\n\u2502   \u2502   \u2514\u2500\u2500 user.entity.ts\n\u2502   \u251c\u2500\u2500 /middlewares     # Express middlewares\n\u2502   \u2502   \u2514\u2500\u2500 auth.middleware.ts\n\u2502   \u251c\u2500\u2500 /repositories    # Data access layer (DAL)\n\u2502   \u2502   \u2514\u2500\u2500 user.repository.ts\n\u2502   \u251c\u2500\u2500 /services        # Business logic layer\n\u2502   \u2502   \u2514\u2500\u2500 user.service.ts\n\u2502   \u251c\u2500\u2500 /routes          # Route definitions\n\u2502   \u2502   \u2514\u2500\u2500 user.routes.ts\n\u2502   \u251c\u2500\u2500 /utils           # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 logger.util.ts\n\u2502   \u2514\u2500\u2500 server.ts        # Entry point of the application\n\u251c\u2500\u2500 /migrations          # Database migration scripts\n\u251c\u2500\u2500 /tests               # Unit and integration tests\n\u251c\u2500\u2500 .env                 # Environment variables\n\u251c\u2500\u2500 package.json         # Project metadata and dependencies\n\u2514\u2500\u2500 tsconfig.json        # TypeScript configuration\n</code></pre>"},{"location":"backendGuide/#libraries-used-in-the-project","title":"\ud83d\udee0\ufe0f Libraries Used in the Project","text":"<p>Here\u2019s an overview of the main tools and libraries integrated into the Elansol Backend:</p> <ol> <li> <p>Express.js    A minimalist web framework for building APIs and web applications.</p> </li> <li> <p>TypeORM    An ORM for TypeScript/JavaScript, supporting various SQL databases.</p> </li> <li> <p>Nodemon    Automatically restarts the server when file changes are detected.</p> </li> <li> <p>dotenv    Loads environment variables from a <code>.env</code> file into <code>process.env</code>.</p> </li> <li> <p>Jest    A testing framework for unit and integration tests.</p> </li> <li> <p>class-validator    Validates class properties using decorators.</p> </li> <li> <p>class-transformer    Transforms plain objects into class instances and vice versa.</p> </li> </ol>"},{"location":"backendGuide/#connecting-to-sql-server","title":"\ud83d\udce1 Connecting to SQL Server","text":""},{"location":"backendGuide/#1-install-required-packages","title":"1. Install Required Packages","text":"<p>Install the necessary packages for TypeORM and SQL Server:</p> <pre><code>npm install typeorm reflect-metadata mssql\n</code></pre>"},{"location":"backendGuide/#2-create-a-database-configuration-file","title":"2. Create a Database Configuration File","text":"<p>In <code>src/config/database.config.ts</code>:</p> <pre><code>import { DataSource } from \"typeorm\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst AppDataSource = new DataSource({\n  type: \"mssql\",\n  host: process.env.DB_HOST,\n  port: Number(process.env.DB_PORT),\n  username: process.env.DB_USER,\n  password: process.env.DB_PASS,\n  database: process.env.DB_NAME,\n  synchronize: true, // Set to false in production\n  logging: false,\n  entities: [__dirname + \"/../entities/*.ts\"],\n  migrations: [__dirname + \"/../migrations/*.ts\"],\n  subscribers: [],\n});\n\nexport default AppDataSource;\n</code></pre>"},{"location":"backendGuide/#3-update-the-env-file","title":"3. Update the <code>.env</code> File","text":"<p>Add database connection details:</p> <pre><code>DB_HOST=your_sql_server_host\nDB_PORT=1433\nDB_USER=your_username\nDB_PASS=your_password\nDB_NAME=your_database_name\n</code></pre>"},{"location":"backendGuide/#4-initialize-the-database-connection","title":"4. Initialize the Database Connection","text":"<p>In <code>src/server.ts</code>:</p> <pre><code>import \"reflect-metadata\";\nimport AppDataSource from \"./config/database.config\";\nimport express from \"express\";\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\nAppDataSource.initialize()\n  .then(() =&gt; {\n    console.log(\"Database connected successfully\");\n    app.listen(PORT, () =&gt; {\n      console.log(`Server is running on http://localhost:${PORT}`);\n    });\n  })\n  .catch((error) =&gt; console.log(\"Database connection error:\", error));\n</code></pre>"},{"location":"backendGuide/#using-the-libraries","title":"\ud83d\udcda Using the Libraries","text":""},{"location":"backendGuide/#1-expressjs-example","title":"1. Express.js Example","text":"<p>In <code>src/routes/user.routes.ts</code>, define a simple route:</p> <pre><code>import { Router } from \"express\";\nimport UserController from \"../controllers/user.controller\";\n\nconst router = Router();\n\nrouter.get(\"/users\", UserController.getAllUsers);\nrouter.post(\"/users\", UserController.createUser);\n\nexport default router;\n</code></pre>"},{"location":"backendGuide/#2-typeorm-example","title":"2. TypeORM Example","text":"<p>In <code>src/controllers/user.controller.ts</code>, interact with the database:</p> <pre><code>import { Request, Response } from \"express\";\nimport { User } from \"../entities/user.entity\";\nimport AppDataSource from \"../config/database.config\";\n\nconst userRepository = AppDataSource.getRepository(User);\n\nclass UserController {\n  static async getAllUsers(req: Request, res: Response) {\n    const users = await userRepository.find();\n    res.json(users);\n  }\n\n  static async createUser(req: Request, res: Response) {\n    const newUser = userRepository.create(req.body);\n    await userRepository.save(newUser);\n    res.status(201).json(newUser);\n  }\n}\n\nexport default UserController;\n</code></pre>"},{"location":"backendGuide/#3-using-class-validator","title":"3. Using <code>class-validator</code>","text":"<p>In <code>src/entities/user.entity.ts</code>:</p> <pre><code>import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\nimport { IsEmail, IsNotEmpty } from \"class-validator\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsNotEmpty()\n  name: string;\n\n  @Column()\n  @IsEmail()\n  email: string;\n}\n</code></pre>"},{"location":"backendGuide/#4-data-access-layer-example","title":"4. Data Access Layer Example","text":"<p>In <code>src/repositories/user.repository.ts</code>:</p> <pre><code>import { User } from \"../entities/user.entity\";\nimport AppDataSource from \"../config/database.config\";\n\nclass UserRepository {\n  private userRepository = AppDataSource.getRepository(User);\n\n  async findAll() {\n    return await this.userRepository.find();\n  }\n\n  async create(userData: Partial&lt;User&gt;) {\n    const user = this.userRepository.create(userData);\n    return await this.userRepository.save(user);\n  }\n}\n\nexport default new UserRepository();\n</code></pre>"},{"location":"backendGuide/#5-service-layer-example","title":"5. Service Layer Example","text":"<p>In <code>src/services/user.service.ts</code>:</p> <pre><code>import UserRepository from \"../repositories/user.repository\";\nimport { User } from \"../entities/user.entity\";\n\nclass UserService {\n  async getAllUsers(): Promise&lt;User[]&gt; {\n    return await UserRepository.findAll();\n  }\n\n  async createUser(userData: Partial&lt;User&gt;): Promise&lt;User&gt; {\n    return await UserRepository.create(userData);\n  }\n}\n\nexport default new UserService();\n</code></pre> <p>By following this guide, you'll be ready to set up, develop, and maintain Elansol Backend projects with confidence. Happy coding! \ud83c\udf89</p>"},{"location":"electronGuide/","title":"\ud83c\udf1f Elansol Native App Developer Guide \ud83c\udf1f","text":"<p>Welcome to the Elansol Native App Developer Guide \u2013 a private and exclusive resource for Elansol Software Developers. This guide is tailored to help you build high-performance native desktop applications using ElectronJS, React, and TypeScript, focusing on best practices and internal standards for Elansol projects.</p> <p>This document will guide you through setting up your environment, implementing inter-process communication (IPC), and leveraging advanced techniques to build feature-rich applications that align with Elansol\u2019s development practices.</p>"},{"location":"electronGuide/#navigation-menu","title":"\ud83d\udcdc Navigation Menu","text":"<ul> <li>\ud83c\udfe0 Home: Understand the fundamentals of building native apps with ElectronJS, React, and TypeScript.</li> <li>\u2699\ufe0f Setting Up: Instructions to set up your development environment according to Elansol\u2019s requirements.</li> <li>\ud83d\udda5\ufe0f Main Process Guide: Learn how to work with Electron\u2019s main process for system-level operations.</li> <li>\ud83c\udfa8 Renderer Process Guide: Discover how to create engaging UIs with React and TypeScript in the renderer process.</li> <li>\ud83d\udd04 IPC Communication: Master communication between the main and renderer processes, including examples of handling file access, CPU usage, and more.</li> <li>\u26a1 PreloaderJS Integration: Integrate PreloaderJS to efficiently manage preloading tasks and data fetching.</li> </ul>"},{"location":"electronGuide/#elansol-developer-only-resource","title":"\ud83d\udd10 Elansol Developer-Only Resource","text":"<p>This guide is a confidential resource intended solely for internal use by the Elansol development team. Please refrain from sharing or distributing this material outside the company.</p>"},{"location":"electronGuide/#setting-up-your-development-environment","title":"\ud83d\udee0\ufe0f Setting Up Your Development Environment","text":"<p>Follow these steps to set up your environment, ensuring compliance with Elansol\u2019s internal development standards:</p> <ol> <li> <p>Install Node.js and npm    Download and install Node.js from nodejs.org, which will also install npm (node package manager).</p> </li> <li> <p>Initialize Your Project</p> </li> </ol> <p><code>bash    mkdir my-electron-app    cd my-electron-app    npm init -y</code></p> <ol> <li>Install Required Dependencies</li> </ol> <p><code>bash    npm install electron react react-dom typescript</code></p> <ol> <li>Initialize TypeScript</li> </ol> <p><code>bash    npx tsc --init</code></p> <ol> <li>Install PreloaderJS</li> </ol> <p><code>bash    npm install preloaderjs</code></p> <ol> <li>Follow Internal Config Standards    Use the pre-defined templates and configuration files shared by the Elansol team for consistent setups.</li> </ol>"},{"location":"electronGuide/#example-folder-structure","title":"\ud83d\udcc1 Example Folder Structure","text":"<p>Ensure your project follows this recommended structure for better organization and maintainability:</p> <pre><code>/my-electron-app\n  /src\n    /main            # Main process files (Electron)\n      index.ts       # Electron entry point\n      systemUtils.ts # System API interactions (file, CPU, etc.)\n    /renderer        # Renderer process files (React)\n      App.tsx        # Main React component\n      CpuUsageComponent.tsx # CPU usage display component\n      FilesList.tsx  # Directory file listing component\n    /assets          # Static files like images and icons\n    /styles          # Global styles (CSS/SCSS)\n  /public\n    index.html       # HTML template for Electron\n  /node_modules\n  tsconfig.json      # TypeScript configuration\n  package.json       # Project dependencies and scripts\n</code></pre>"},{"location":"electronGuide/#main-process-electronjs","title":"\ud83d\udda5\ufe0f Main Process (ElectronJS)","text":"<p>The main process manages the app lifecycle and interacts with the operating system.</p>"},{"location":"electronGuide/#cpu-usage-example","title":"CPU Usage Example","text":"<pre><code>import { ipcMain } from \"electron\";\nimport os from \"os\";\n\nconst getCpuUsage = () =&gt; {\n  const cpuInfo = os.cpus();\n  return cpuInfo.map((cpu) =&gt; {\n    const total = Object.values(cpu.times).reduce((a, b) =&gt; a + b, 0);\n    const usage = ((total - cpu.times.idle) / total) * 100;\n    return usage.toFixed(2);\n  });\n};\n\nipcMain.handle(\"get-cpu-usage\", () =&gt; {\n  return getCpuUsage();\n});\n</code></pre> <p>Note: Modify these examples as needed to suit your specific project requirements.</p>"},{"location":"electronGuide/#renderer-process-react","title":"\ud83c\udfa8 Renderer Process (React)","text":"<p>The renderer process handles the user interface and interacts with the main process through IPC.</p>"},{"location":"electronGuide/#using-ipc-for-cpu-usage","title":"Using IPC for CPU Usage","text":"<pre><code>import React, { useEffect, useState } from \"react\";\n\nconst CpuUsageComponent = () =&gt; {\n  const [cpuUsage, setCpuUsage] = useState&lt;string[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchCpuUsage = async () =&gt; {\n      const usage = await window.electron.invoke(\"get-cpu-usage\");\n      setCpuUsage(usage);\n    };\n    fetchCpuUsage();\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;CPU Usage&lt;/h2&gt;\n      &lt;ul&gt;\n        {cpuUsage.map((usage, index) =&gt; (\n          &lt;li key={index}&gt;\n            Core {index + 1}: {usage}%\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default CpuUsageComponent;\n</code></pre>"},{"location":"electronGuide/#fetching-data-from-endpoints","title":"\ud83c\udf10 Fetching Data from Endpoints","text":"<p>For external data, use <code>fetch</code> or Axios to make API calls securely.</p>"},{"location":"electronGuide/#using-fetch-example","title":"Using Fetch Example","text":"<pre><code>import React, { useEffect, useState } from \"react\";\n\nconst ApiDataComponent = () =&gt; {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    const fetchData = async () =&gt; {\n      const response = await fetch(\"https://api.example.com/data\");\n      setData(await response.json());\n    };\n    fetchData();\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Fetched Data&lt;/h2&gt;\n      &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ApiDataComponent;\n</code></pre>"},{"location":"electronGuide/#ipc-communication-preloaderjs-integration","title":"\ud83d\udd04 IPC Communication: PreloaderJS Integration","text":"<p>Use PreloaderJS for efficient preloading of tasks in the main process and share data with the renderer process via IPC.</p> <pre><code>import { ipcMain } from \"electron\";\nimport { Preloader } from \"preloaderjs\";\n\nipcMain.handle(\"start-preload\", async () =&gt; {\n  const preloader = new Preloader();\n  preloader.addTask(\"getCpuUsage\", getCpuUsage);\n  const results = await preloader.start();\n  return results;\n});\n</code></pre>"},{"location":"electronGuide/#conclusion","title":"\ud83d\ude80 Conclusion","text":"<p>By following this guide, Elansol developers can build reliable, efficient native desktop applications. This guide is designed exclusively for internal use to ensure that all apps adhere to Elansol\u2019s standards. Always keep your project updated and aligned with the latest internal templates and practices.</p> <p>Happy coding!</p>"},{"location":"frontendGuide/","title":"\ud83d\ude80 Frontend Guide for Elansol Projects","text":"<p>This guide provides a step-by-step introduction to setting up and working with the KPI Frontend project. Follow along to get started efficiently and maintain best practices throughout your development journey.</p>"},{"location":"frontendGuide/#getting-started-with-the-kpi-frontend","title":"\ud83c\udfaf Getting Started with the KPI Frontend","text":""},{"location":"frontendGuide/#1-cloning-the-github-repository","title":"1. Cloning the GitHub Repository","text":"<p>Clone the project repository using SSH:</p> <pre><code>git clone git@github.com:elansol/KpiPlus-frontend.git\n</code></pre> <p>Ensure your SSH key is set up for GitHub. For detailed instructions on creating an SSH key, refer to the following guide: Learn about SSH keys</p>"},{"location":"frontendGuide/#2-setting-up-the-project","title":"2. Setting Up the Project","text":"<p>Run the following commands in your terminal:</p> <ol> <li>Install dependencies:    <code>bash    npm i</code></li> <li>Start the development server:    <code>bash    npm start</code></li> <li>Launch Storybook for component development and documentation:    <code>bash    npm run storybook</code></li> </ol>"},{"location":"frontendGuide/#folder-structure-of-the-project","title":"\ud83d\udcc1 Folder Structure of the Project","text":"<p>The project is organized into the following main directories:</p> <ul> <li> <p><code>src/</code>   Contains the core application source code, including:</p> </li> <li> <p>React components</p> </li> <li>Redux slices for state management</li> <li>Routes</li> <li> <p>Utilities and helper functions</p> </li> <li> <p><code>public/</code>   Contains static assets like HTML files, images, and manifest configurations.</p> </li> <li> <p><code>.storybook/</code>   Configuration files for Storybook, which provides a sandbox environment for UI component development.</p> </li> </ul>"},{"location":"frontendGuide/#libraries-used-in-the-project","title":"\ud83d\udee0\ufe0f Libraries Used in the Project","text":"<p>Here\u2019s a breakdown of the key tools and libraries integrated into the KPI Frontend:</p> <ol> <li> <p>Storybook</p> </li> <li> <p>A development environment for building, testing, and documenting UI components in isolation.</p> </li> <li> <p>Material-UI</p> </li> <li> <p>A modern React UI library for creating accessible, responsive, and customizable design systems.</p> </li> <li> <p>React Redux Toolkit</p> </li> <li> <p>The official and recommended way to manage state in React apps.</p> </li> <li> <p>React Router</p> </li> <li> <p>A powerful library for implementing dynamic routing and navigation.</p> </li> <li> <p>Axios</p> </li> <li> <p>A promise-based HTTP client for handling API requests with ease.</p> </li> <li> <p>direnv</p> </li> <li>A shell extension for automatically loading environment variables based on the current directory.</li> </ol> <p>By following this guide, you'll be well-equipped to set up, develop, and contribute to the KPI Frontend project seamlessly. Happy coding! \ud83c\udf89</p>"},{"location":"namingConventions/","title":"\ud83d\udcda Elansol Naming Conventions","text":"<p>This guide provides a comprehensive set of naming conventions for databases, entities, interfaces, types, enums, files, and folders. Consistent naming ensures code clarity, maintainability, and improved collaboration. \u2728</p>"},{"location":"namingConventions/#general-guidelines","title":"\ud83d\udcd6 General Guidelines","text":"<ul> <li>Use <code>snake_case</code> for database objects (tables, columns, indexes, etc.).</li> <li>Avoid reserved keywords (e.g., <code>user</code>, <code>table</code>, <code>index</code>).</li> <li>Be descriptive but concise in naming.</li> <li>Prefer singular nouns for table names (e.g., <code>user</code>, not <code>users</code>).</li> </ul>"},{"location":"namingConventions/#database-naming-conventions","title":"\ud83d\uddc3\ufe0f Database Naming Conventions","text":""},{"location":"namingConventions/#tables","title":"Tables","text":"<ul> <li>Format: <code>snake_case</code></li> <li>Example: <code>user_profile</code>, <code>order_history</code></li> </ul>"},{"location":"namingConventions/#columns","title":"Columns","text":"<ul> <li>Format: <code>snake_case</code></li> <li>Prefix columns with the table name for clarity in joins and queries.</li> <li>Example: <code>user_id</code>, <code>created_at</code>, <code>first_name</code>, <code>email_address</code></li> </ul>"},{"location":"namingConventions/#primary-keys","title":"Primary Keys","text":"<ul> <li>Format: <code>id</code> or <code>[table]_id</code></li> <li>Example: <code>id</code> (for single table), <code>user_id</code> (for shared context)</li> </ul>"},{"location":"namingConventions/#foreign-keys","title":"Foreign Keys","text":"<ul> <li>Format: <code>[referenced_table]_id</code></li> <li>Example: <code>user_id</code>, <code>product_id</code></li> </ul>"},{"location":"namingConventions/#indexes","title":"Indexes","text":"<ul> <li>Format: <code>idx_[table]_[column]</code></li> <li>Example: <code>idx_user_email</code></li> </ul>"},{"location":"namingConventions/#timestamps","title":"Timestamps","text":"<p>Standard column names for timestamps: - <code>created_at</code>: Creation timestamp - <code>updated_at</code>: Last modification timestamp - <code>deleted_at</code>: Soft delete timestamp (optional)</p>"},{"location":"namingConventions/#entity-naming-conventions","title":"\ud83d\udee0\ufe0f Entity Naming Conventions","text":""},{"location":"namingConventions/#entity-names-classesmodels","title":"Entity Names (Classes/Models)","text":"<ul> <li>Format: <code>PascalCase</code></li> <li>Represent domain objects or database tables.</li> <li>Use singular nouns for each entity.</li> <li>Example: <code>UserProfile</code>, <code>OrderHistory</code></li> </ul>"},{"location":"namingConventions/#entity-properties","title":"Entity Properties","text":"<ul> <li>Format: <code>camelCase</code></li> <li>Match the corresponding database column name in code.</li> <li>Example: <code>userId</code>, <code>createdAt</code>, <code>firstName</code></li> </ul>"},{"location":"namingConventions/#interface-naming-conventions","title":"\ud83d\udd8d\ufe0f Interface Naming Conventions","text":""},{"location":"namingConventions/#interfaces","title":"Interfaces","text":"<ul> <li>Format: <code>PascalCase</code>, optionally prefixed with <code>I</code> (common in TypeScript).</li> <li>Define the shape of objects or types.</li> <li>Example: <code>IUserProfile</code>, <code>IOrderHistory</code></li> </ul>"},{"location":"namingConventions/#interface-properties","title":"Interface Properties","text":"<ul> <li>Format: <code>camelCase</code></li> <li>Example:  </li> </ul> <pre><code>interface IUserProfile {\n  userId: string;\n  firstName: string;\n  emailAddress: string;\n}\n</code></pre>"},{"location":"namingConventions/#types-and-enums-naming-conventions","title":"\ud83e\udde9 Types and Enums Naming Conventions","text":""},{"location":"namingConventions/#types","title":"Types","text":"<ul> <li>Format: <code>PascalCase</code></li> <li>Use descriptive names; avoid abbreviations.</li> <li>Example:  </li> </ul> <pre><code>type UserStatus = \"active\" | \"inactive\" | \"banned\";\n</code></pre>"},{"location":"namingConventions/#enums","title":"Enums","text":"<ul> <li>Format: <code>PascalCase</code> for the enum name, <code>UPPER_SNAKE_CASE</code> for its values.</li> <li>Example:  </li> </ul> <pre><code>enum OrderStatus {\n  PENDING = \"PENDING\",\n  SHIPPED = \"SHIPPED\",\n  DELIVERED = \"DELIVERED\",\n}\n</code></pre>"},{"location":"namingConventions/#file-naming-conventions","title":"\ud83d\uddc2\ufe0f File Naming Conventions","text":""},{"location":"namingConventions/#files","title":"Files","text":"<ul> <li>Format: <code>kebab-case</code></li> <li>Separate words with hyphens. Avoid spaces or underscores.</li> <li>Example: <code>user-profile.ts</code>, <code>order-history.model.ts</code></li> </ul>"},{"location":"namingConventions/#folders","title":"Folders","text":"<ul> <li>Format: <code>kebab-case</code></li> <li>Group related files logically.</li> <li>Example:  </li> </ul> <pre><code>/models\n  - user-profile.ts\n  - order-history.ts\n/controllers\n  - user-controller.ts\n</code></pre>"},{"location":"namingConventions/#component-files-react","title":"Component Files (React)","text":"<ul> <li>Format:  </li> <li>Main component file: <code>PascalCase</code> </li> <li>Auxiliary files: <code>kebab-case</code> </li> <li>Example:  </li> <li><code>UserProfile.tsx</code> </li> <li><code>user-profile.styles.ts</code> </li> <li><code>user-profile.test.ts</code> </li> </ul>"},{"location":"namingConventions/#example-workflow","title":"\ud83d\ude80 Example Workflow","text":""},{"location":"namingConventions/#database-schema","title":"Database Schema","text":"<pre><code>CREATE TABLE user_profile (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50),\n  email_address VARCHAR(100) UNIQUE NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"namingConventions/#entity-typescript-model","title":"Entity (TypeScript Model)","text":"<pre><code>class UserProfile {\n  id: number;\n  userId: number;\n  firstName: string;\n  lastName?: string;\n  emailAddress: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n</code></pre>"},{"location":"namingConventions/#interface","title":"Interface","text":"<pre><code>interface IUserProfile {\n  id: number;\n  userId: number;\n  firstName: string;\n  lastName?: string;\n  emailAddress: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n</code></pre>"},{"location":"namingConventions/#type-definition","title":"Type Definition","text":"<pre><code>type UserRole = \"admin\" | \"editor\" | \"viewer\";\n</code></pre>"},{"location":"namingConventions/#file-organization","title":"File Organization","text":"<pre><code>/src\n  /models\n    - user-profile.ts\n  /interfaces\n    - user-profile.interface.ts\n  /types\n    - user-role.type.ts\n  /services\n    - user-profile.service.ts\n  /controllers\n    - user-controller.ts\n</code></pre> <p>By following these conventions, you\u2019ll create a clean, maintainable, and scalable codebase. \ud83d\udee1\ufe0f</p>"},{"location":"nodeAndExpressCrashCourse/","title":"\ud83d\udcda Node.js &amp; Express.js Crash Course Documentation","text":"<p>Welcome to the Node.js &amp; Express.js Crash Course! In this guide, you'll learn how to build a backend server using Node.js and Express.js, covering fundamental concepts like middleware, file uploads, authentication (JWT with Refresh Token), database integration (MongoDB and PostgreSQL), and more. By the end, you\u2019ll be ready to create real-world web applications and APIs.</p>"},{"location":"nodeAndExpressCrashCourse/#getting-started-with-nodejs-expressjs","title":"\ud83d\ude80 Getting Started with Node.js &amp; Express.js","text":""},{"location":"nodeAndExpressCrashCourse/#step-1-install-nodejs","title":"Step 1: Install Node.js","text":"<p>Download and install Node.js from nodejs.org, which includes npm (Node Package Manager) for managing dependencies.</p>"},{"location":"nodeAndExpressCrashCourse/#step-2-set-up-a-nodejs-project","title":"Step 2: Set Up a Node.js Project","text":"<p>Create a new project directory, initialize a Node.js project, and install necessary dependencies.</p> <pre><code>mkdir my-express-app\ncd my-express-app\nnpm init -y\nnpm install express morgan multer jsonwebtoken bcryptjs mongoose pg\nnpm install --save-dev nodemon\n</code></pre> <p>This installs: - express: Core framework for building APIs. - morgan: Middleware for logging HTTP requests. - multer: Middleware for handling file uploads. - jsonwebtoken: JWT authentication package. - bcryptjs: For hashing passwords. - mongoose: MongoDB ORM for managing database operations. - pg: PostgreSQL client for Node.js. - nodemon: For auto-restarting the server during development.</p>"},{"location":"nodeAndExpressCrashCourse/#building-your-first-express-server","title":"\ud83d\udd28 Building Your First Express Server","text":""},{"location":"nodeAndExpressCrashCourse/#basic-express-setup","title":"Basic Express Setup","text":"<p>Create <code>server.js</code> to set up a basic Express server.</p> <pre><code>const express = require('express');\nconst morgan = require('morgan');\nconst app = express();\nconst port = 3000;\n\n// Use Morgan for logging HTTP requests\napp.use(morgan('dev'));\n\n// Middleware to parse JSON request bodies\napp.use(express.json());\n\n// Basic route\napp.get('/', (req, res) =&gt; {\n  res.send('Hello, World!');\n});\n\n// Start server\napp.listen(port, () =&gt; {\n  console.log(`Server running at http://localhost:${port}`);\n});\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#running-the-server-with-nodemon","title":"Running the Server with Nodemon","text":"<p>Update your <code>package.json</code> to include a start script:</p> <pre><code>\"scripts\": {\n  \"start\": \"nodemon server.js\"\n}\n</code></pre> <p>Run the server with:</p> <pre><code>npm start\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#middleware-in-expressjs","title":"\ud83d\udd27 Middleware in Express.js","text":"<p>Middleware functions are essential in Express for tasks like logging, authentication, and handling file uploads. Here\u2019s how to use Morgan and Multer.</p>"},{"location":"nodeAndExpressCrashCourse/#using-morgan-for-request-logging","title":"Using Morgan for Request Logging","text":"<p>Morgan logs HTTP requests, helping with debugging and monitoring.</p> <pre><code>const morgan = require('morgan');\napp.use(morgan('dev'));\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#handling-file-uploads-with-multer","title":"Handling File Uploads with Multer","text":"<p>Multer handles file uploads. Here\u2019s how you can use it:</p> <pre><code>const multer = require('multer');\n\n// Configure Multer storage options\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) =&gt; {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) =&gt; {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\n// Initialize Multer\nconst upload = multer({ storage });\n\n// File upload route\napp.post('/upload', upload.single('file'), (req, res) =&gt; {\n  if (!req.file) return res.status(400).send('No file uploaded.');\n  res.send(`File uploaded: ${req.file.filename}`);\n});\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#authentication-jwt-with-refresh-tokens","title":"\ud83d\udd12 Authentication: JWT with Refresh Tokens","text":"<p>Using JWT (JSON Web Token) for authentication is common in modern web apps. One challenge with JWT is token expiration. To handle this, you can implement Refresh Tokens.</p>"},{"location":"nodeAndExpressCrashCourse/#jwt-authentication-with-refresh-tokens","title":"JWT Authentication with Refresh Tokens","text":"<ol> <li>Install JWT and BcryptJS:</li> </ol> <pre><code>npm install jsonwebtoken bcryptjs\n</code></pre> <ol> <li>JWT and Refresh Token Setup:</li> </ol> <p>Here\u2019s how to issue an access token and a refresh token:</p> <pre><code>const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\n// Dummy users database (in-memory)\nconst users = [\n  { id: 1, username: 'alice', password: '$2a$10$EJ8uWg4P5o8VznMoc0e8t2k9VOVxY8xhFj4PfTgz9gqkxXy35S0aG' }, // bcrypt hash of 'password123'\n];\n\n// Middleware to verify JWT token\nfunction verifyToken(req, res, next) {\n  const token = req.header('Authorization')?.split(' ')[1]; // Bearer &lt;token&gt;\n  if (!token) return res.status(401).send('Access Denied');\n\n  jwt.verify(token, 'your_jwt_secret_key', (err, user) =&gt; {\n    if (err) return res.status(403).send('Invalid Token');\n    req.user = user;\n    next();\n  });\n}\n\n// Function to generate access and refresh tokens\nfunction generateTokens(user) {\n  const accessToken = jwt.sign({ id: user.id, username: user.username }, 'your_jwt_secret_key', { expiresIn: '15m' });\n  const refreshToken = jwt.sign({ id: user.id }, 'your_refresh_token_secret', { expiresIn: '7d' });\n  return { accessToken, refreshToken };\n}\n\n// Route to login and generate JWT + Refresh token\napp.post('/login', (req, res) =&gt; {\n  const { username, password } = req.body;\n\n  const user = users.find((u) =&gt; u.username === username);\n  if (!user) return res.status(400).send('User not found.');\n\n  // Compare password with hash stored in database\n  bcrypt.compare(password, user.password, (err, result) =&gt; {\n    if (!result) return res.status(400).send('Invalid password.');\n\n    // Generate access token and refresh token\n    const { accessToken, refreshToken } = generateTokens(user);\n    res.json({ accessToken, refreshToken });\n  });\n});\n\n// Route to refresh the access token using the refresh token\napp.post('/token', (req, res) =&gt; {\n  const { refreshToken } = req.body;\n\n  if (!refreshToken) return res.status(401).send('Refresh token is required.');\n\n  jwt.verify(refreshToken, 'your_refresh_token_secret', (err, user) =&gt; {\n    if (err) return res.status(403).send('Invalid refresh token.');\n\n    // Generate new access token\n    const { accessToken } = generateTokens(user);\n    res.json({ accessToken });\n  });\n});\n\n// Protected route using JWT\napp.get('/protected', verifyToken, (req, res) =&gt; {\n  res.send(`Hello ${req.user.username}, welcome to the protected route.`);\n});\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#explanation-of-tokens","title":"Explanation of Tokens:","text":"<ul> <li>Access Token: A short-lived token (usually expires in 15 minutes to 1 hour). Used to authenticate requests.</li> <li>Refresh Token: A long-lived token (usually expires in 7 days or longer). Used to obtain a new access token after it expires.</li> </ul>"},{"location":"nodeAndExpressCrashCourse/#how-it-works","title":"How It Works:","text":"<ol> <li>The user logs in and receives an access token (short-lived) and a refresh token (long-lived).</li> <li>The access token is used to authenticate API requests. It expires quickly (e.g., in 15 minutes).</li> <li>If the access token expires, the client can send the refresh token to the server to obtain a new access token without requiring the user to log in again.</li> </ol>"},{"location":"nodeAndExpressCrashCourse/#testing","title":"Testing:","text":"<ol> <li>Login: Use the <code>/login</code> route to get the access token and refresh token.</li> <li>Refresh Access Token: Use the <code>/token</code> route to refresh the access token using the refresh token.</li> <li>Access Protected Route: Use the access token to access the <code>/protected</code> route.</li> </ol>"},{"location":"nodeAndExpressCrashCourse/#database-integration-mongodb-and-postgresql","title":"\ud83d\uddc4\ufe0f Database Integration: MongoDB and PostgreSQL","text":""},{"location":"nodeAndExpressCrashCourse/#1-integrating-mongodb-with-mongoose","title":"1. Integrating MongoDB with Mongoose","text":"<ol> <li>Install Mongoose:</li> </ol> <pre><code>npm install mongoose\n</code></pre> <ol> <li>Connect to MongoDB and Create a Model:</li> </ol> <pre><code>const mongoose = require('mongoose');\n\n// MongoDB connection\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() =&gt; console.log('MongoDB Connected'))\n  .catch(err =&gt; console.log(err));\n\n// Define a schema for users\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true },\n  password: { type: String, required: true },\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Create a new user\napp.post('/register', (req, res) =&gt; {\n  const { username, password } = req.body;\n\n  const newUser = new User({ username, password });\n  newUser.save()\n    .then(() =&gt; res.status(201).send('User registered'))\n    .catch(err =&gt; res.status(400).send('Error registering user'));\n});\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#2-integrating-postgresql-with-pg","title":"2. Integrating PostgreSQL with pg","text":"<ol> <li>Install pg:</li> </ol> <pre><code>npm install pg\n</code></pre> <ol> <li>Connect to PostgreSQL and Query the Database:</li> </ol> <pre><code>const { Client } = require('pg');\n\n// Connect to PostgreSQL\nconst client = new Client({\n  user: 'myuser',\n  host: 'localhost',\n  database: 'mydb',\n  password: 'mypassword',\n  port: 5432,\n});\n\nclient.connect();\n\n// Query example\napp.get('/users', async\n\n (req, res) =&gt; {\n  const result = await client.query('SELECT * FROM users');\n  res.json(result.rows);\n});\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#folder-structure-example","title":"\ud83d\udcc1 Folder Structure Example","text":"<p>Here\u2019s an updated folder structure with MongoDB and PostgreSQL integrations:</p> <pre><code>/my-express-app\n  /uploads                # Folder for file uploads\n  /node_modules\n  /public                 # Static files like HTML, CSS, JavaScript\n  /src\n    /controllers          # Controllers for handling logic\n      userController.js\n    /models               # MongoDB models or PostgreSQL queries\n      userModel.js\n    /routes               # API routes\n      userRoutes.js\n    /middlewares          # Custom middleware (e.g., JWT verification)\n    server.js             # Main entry point\n  /package.json           # Dependencies and scripts\n  /tsconfig.json (if using TypeScript)\n</code></pre>"},{"location":"nodeAndExpressCrashCourse/#conclusion","title":"\ud83d\ude80 Conclusion","text":"<p>In this Node.js &amp; Express.js Crash Course, you\u2019ve learned how to build a RESTful API with authentication (JWT and Refresh Tokens), handle file uploads, integrate MongoDB and PostgreSQL databases, and manage complex routes. You now have the foundation to build scalable and secure backend applications.</p>"},{"location":"nodeAndExpressCrashCourse/#next-steps","title":"Next Steps:","text":"<ul> <li>Add data validation and error handling.</li> <li>Implement advanced authentication (e.g., refresh tokens).</li> <li>Explore different database setups like MySQL or Redis for caching.</li> </ul> <p>Happy coding! \ud83d\ude80</p>"},{"location":"reactCrashCourse/","title":"\ud83d\udcda React Crash Course Documentation","text":"<p>Welcome to the React Crash Course! This guide will walk you through the basics of React, focusing on hooks and real-life use cases. Whether you're a beginner or looking to brush up on the latest React practices, this guide has you covered. We'll explore installation, dive into essential hooks, and provide practical examples to help you apply React concepts in real-world scenarios.  </p>"},{"location":"reactCrashCourse/#getting-started-with-react","title":"\ud83d\ude80 Getting Started with React","text":"<p>To begin working with React, you'll need to install Node.js and set up a React project using either Create React App or Vite.  </p>"},{"location":"reactCrashCourse/#step-1-install-nodejs","title":"Step 1: Install Node.js","text":"<p>Download and install Node.js from nodejs.org. It includes npm (Node Package Manager) to help you manage dependencies.  </p>"},{"location":"reactCrashCourse/#step-2-set-up-a-react-project","title":"Step 2: Set Up a React Project","text":"<p>The easiest way to set up a React project is with Create React App. Run the following commands to get started:  </p> <pre><code>npx create-react-app my-react-app --template typescript\ncd my-react-app\nnpm start\n</code></pre> <p>This will create a new React project with TypeScript support and launch it in your default browser.  </p>"},{"location":"reactCrashCourse/#basic-concepts-of-react","title":"\ud83e\uddd1\u200d\ud83d\udcbb Basic Concepts of React","text":"<p>Before we dive into hooks, here\u2019s a quick overview of React's foundational concepts:  </p> <ol> <li>Components: React apps are built with components\u2014JavaScript functions that return JSX to define what should be rendered on the screen.  </li> <li>JSX: A syntax extension for JavaScript that resembles HTML but supports embedding JavaScript expressions.  </li> <li>Props: Used to pass data from parent to child components.  </li> <li>State: A local data store within a component that changes dynamically.  </li> </ol>"},{"location":"reactCrashCourse/#react-hooks","title":"\ud83d\udd28 React Hooks","text":"<p>React hooks simplify the process of managing state, side effects, and lifecycle methods in functional components. Here are the most commonly used hooks:  </p>"},{"location":"reactCrashCourse/#1-usestate","title":"1. useState","text":"<p><code>useState</code> allows you to add state to your functional components.  </p>"},{"location":"reactCrashCourse/#how-to-use-usestate","title":"How to Use <code>useState</code>","text":"<pre><code>import React, { useState } from 'react';\n\nconst Counter = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const increment = () =&gt; setCount(count + 1);\n  const decrement = () =&gt; setCount(count - 1);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Count: {count}&lt;/h1&gt;\n      &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n      &lt;button onClick={decrement}&gt;Decrement&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example","title":"Real-Life Example:","text":"<p>A counter application where users can increment or decrement a value.  </p>"},{"location":"reactCrashCourse/#2-useeffect","title":"2. useEffect","text":"<p><code>useEffect</code> handles side effects like data fetching, DOM updates, or setting up subscriptions.  </p>"},{"location":"reactCrashCourse/#how-to-use-useeffect","title":"How to Use <code>useEffect</code>","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nconst FetchDataComponent = () =&gt; {\n  const [data, setData] = useState&lt;string | null&gt;(null);\n\n  useEffect(() =&gt; {\n    fetch('https://jsonplaceholder.typicode.com/posts/1')\n      .then((response) =&gt; response.json())\n      .then((jsonData) =&gt; setData(jsonData.title));\n  }, []); // Runs once on mount\n\n  return &lt;div&gt;{data ? data : 'Loading...'}&lt;/div&gt;;\n};\n\nexport default FetchDataComponent;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example_1","title":"Real-Life Example:","text":"<p>Fetching and displaying a post title from a placeholder API.  </p>"},{"location":"reactCrashCourse/#3-usecontext","title":"3. useContext","text":"<p><code>useContext</code> provides a way to share data (like themes or authentication) across components without passing props manually.  </p>"},{"location":"reactCrashCourse/#how-to-use-usecontext","title":"How to Use <code>useContext</code>","text":"<pre><code>import React, { useContext } from 'react';\n\nconst ThemeContext = React.createContext('light');\n\nconst ThemedComponent = () =&gt; {\n  const theme = useContext(ThemeContext);\n\n  return (\n    &lt;div style={{ background: theme === 'dark' ? '#333' : '#fff', color: theme === 'dark' ? '#fff' : '#000' }}&gt;\n      The current theme is {theme}\n    &lt;/div&gt;\n  );\n};\n\nconst App = () =&gt; (\n  &lt;ThemeContext.Provider value=\"dark\"&gt;\n    &lt;ThemedComponent /&gt;\n  &lt;/ThemeContext.Provider&gt;\n);\n\nexport default App;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example_2","title":"Real-Life Example:","text":"<p>A theme toggle system that dynamically updates the UI based on the selected theme.  </p>"},{"location":"reactCrashCourse/#4-usereducer","title":"4. useReducer","text":"<p><code>useReducer</code> is ideal for managing complex state logic.  </p>"},{"location":"reactCrashCourse/#how-to-use-usereducer","title":"How to Use <code>useReducer</code>","text":"<pre><code>import React, { useReducer } from 'react';\n\nconst initialState = { count: 0 };\n\nfunction reducer(state: { count: number }, action: { type: string }) {\n  switch (action.type) {\n    case 'increment': return { count: state.count + 1 };\n    case 'decrement': return { count: state.count - 1 };\n    default: return state;\n  }\n}\n\nconst CounterWithReducer = () =&gt; {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Count: {state.count}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: 'increment' })}&gt;Increment&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: 'decrement' })}&gt;Decrement&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default CounterWithReducer;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example_3","title":"Real-Life Example:","text":"<p>A complex counter application using <code>useReducer</code> for better state control.  </p>"},{"location":"reactCrashCourse/#5-useref","title":"5. useRef","text":"<p><code>useRef</code> persists values across renders without triggering re-renders.  </p>"},{"location":"reactCrashCourse/#how-to-use-useref","title":"How to Use <code>useRef</code>","text":"<pre><code>import React, { useRef } from 'react';\n\nconst FocusInputComponent = () =&gt; {\n  const inputRef = useRef&lt;HTMLInputElement&gt;(null);\n\n  const handleFocus = () =&gt; {\n    if (inputRef.current) inputRef.current.focus();\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input ref={inputRef} type=\"text\" /&gt;\n      &lt;button onClick={handleFocus}&gt;Focus Input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default FocusInputComponent;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example_4","title":"Real-Life Example:","text":"<p>A focus input feature that programmatically focuses an input element.  </p>"},{"location":"reactCrashCourse/#6-usememo","title":"6. useMemo","text":"<p><code>useMemo</code> optimizes expensive calculations by memoizing their results.  </p>"},{"location":"reactCrashCourse/#how-to-use-usememo","title":"How to Use <code>useMemo</code>","text":"<pre><code>import React, { useState, useMemo } from 'react';\n\nconst ExpensiveComputation = ({ num }: { num: number }) =&gt; {\n  const result = useMemo(() =&gt; {\n    console.log('Calculating...');\n    return num * 1000;\n  }, [num]);\n\n  return &lt;div&gt;Result: {result}&lt;/div&gt;;\n};\n\nconst MemoExample = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n      &lt;ExpensiveComputation num={count} /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MemoExample;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example_5","title":"Real-Life Example:","text":"<p>Avoiding unnecessary recalculations in an expensive computation component.  </p>"},{"location":"reactCrashCourse/#7-usecallback","title":"7. useCallback","text":"<p><code>useCallback</code> memoizes functions to prevent unnecessary re-renders.  </p>"},{"location":"reactCrashCourse/#how-to-use-usecallback","title":"How to Use <code>useCallback</code>","text":"<pre><code>import React, { useState, useCallback } from 'react';\n\nconst Button = ({ onClick }: { onClick: () =&gt; void }) =&gt; {\n  console.log('Rendering Button');\n  return &lt;button onClick={onClick}&gt;Click Me&lt;/button&gt;;\n};\n\nconst CallbackExample = () =&gt; {\n  const [count, setCount] = useState(0);\n  const increment = useCallback(() =&gt; setCount(count + 1), [count]);\n\n  return (\n    &lt;div&gt;\n      &lt;Button onClick={increment} /&gt;\n      &lt;h1&gt;Count: {count}&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default CallbackExample;\n</code></pre>"},{"location":"reactCrashCourse/#real-life-example_6","title":"Real-Life Example:","text":"<p>A memoized click handler for buttons to optimize rendering.  </p>"},{"location":"reactCrashCourse/#folder-structure","title":"\ud83d\udcc1 Folder Structure","text":"<p>Here\u2019s an example folder structure for a scalable React app:  </p> <pre><code>/my-react-app\n  /src\n    /components     # Reusable components\n    /hooks          # Custom hooks\n    /pages          # Page components for routing\n    App.tsx         # Main entry point\n  /public\n    index.html\n  tsconfig.json     # TypeScript configuration\n  package.json      # Project dependencies\n</code></pre>"},{"location":"reactCrashCourse/#conclusion","title":"\ud83d\ude80 Conclusion","text":"<p>This crash course equips you with the knowledge to start building functional React applications using hooks. Experiment with these concepts, integrate them into your projects, and refine your development workflow.  </p> <p>Happy coding! </p>"}]}